# Note: This playbook is incomplete and will require additional testing to fully automate the deployment of srsRAN using Docker.

- hosts: all
  become: yes # This ensures commands requiring root are executed with sudo
  vars:
    docker_gpg_key_url: https://download.docker.com/linux/ubuntu/gpg
    docker_repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable

# Check if Python is installed, if not, install it
  tasks:
    - name: Ensure Python3 is installed
      package:
        name: python3
        state: present
        update_cache: yes

# Install necessary Docker dependencies
    - name: Install Docker dependencies
      package:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes

# Add Docker GPG key for package verification
    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/ubuntu/gpg"
        state: present

# Add Docker repository to the package manager
    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "{{ docker_repo }}"
        state: present
        update_cache: yes

# Install the latest version of Docker
    - name: Install Docker
      package:
        name: docker-ce
        state: latest

# Ensure Docker service is started and enabled at boot
    - name: Start and enable Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

# Clone the ORAN-Project repository to a temporary local directory
    - name: Clone the repository
      git:
        repo: "https://github.com/edwardkeith-io/ORAN-Project"
        dest: /tmp/oran_project_repo
        bare: no
        clone: yes
        force: yes

# Enable sparse-checkout to filter the content of the repository (we only need the docker and srsran_config folders)
    - name: Enable sparse-checkout
      command: git sparse-checkout init
      args:
        chdir: /tmp/oran_project_repo

# Configure sparse-checkout to include specific folders
    - name: Configure sparse-checkout to include specific folders
      command: git sparse-checkout set docker srsran_config
      args:
        chdir: /tmp/oran_project_repo

# Pull the filtered content from the repository
    - name: Pull the filtered content
      command: git pull origin main
      args:
        chdir: /tmp/oran_project_repo

# Copy srsRAN configuration files to the appropriate directory
    - name: Copy srsRAN configuration files
      copy:
        src: /tmp/oran_project_repo/srsran_config
        dest: /etc/srsran_config
        remote_src: yes

# Build the Docker image using the Dockerfile in the cloned repository
    - name: Build the Docker image
      docker_image:
        name: srsran_image
        build:
          path: /tmp/oran_project_repo/docker 

# Run the srsRAN container with the built image
    - name: Run srsRAN container
      docker_container:
        name: srsRAN
        image: "srsran_image"
        state: started
        restart_policy: always
        volumes:
           - /etc/srsran_config:/config  # Host directory mapped to container directory

# Verify that the srsRAN container is running
    - name: Verify srsRAN container is running
      docker_container_info:
        name: srsRAN
      register: container_info

    - debug:
        msg: "Container status: {{ container_info.state.Status }}"

# Verify that the srsRAN configuration files are accessible inside the container
    - name: Verify srsRAN configuration files are accessible
      docker_container_exec:
        container: srsRAN
        command: ls /config
      register: config_files

    - name: Display configuration files in the container
      debug:
        msg: "Configuration files in the container: {{ config_files.stdout_lines }}"
